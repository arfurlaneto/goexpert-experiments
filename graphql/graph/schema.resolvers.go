package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"goexpertgraphql/graph/model"
	"time"

	"github.com/google/uuid"
	"github.com/goombaio/namegenerator"
)

var nameGenerator = namegenerator.NewNameGenerator(time.Now().UTC().UnixNano())

var userDB []*model.User = make([]*model.User, 0)
var todoDB []*model.Todo = make([]*model.Todo, 0)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	var user *model.User
	for _, u := range userDB {
		if u.ID == input.UserID {
			user = u
			break
		}
	}
	if user == nil {
		user = &model.User{
			ID:   uuid.New().String(),
			Name: nameGenerator.Generate(),
		}
		userDB = append(userDB, user)
	}

	newTodo := &model.Todo{
		ID:   uuid.New().String(),
		Text: input.Text,
		User: user,
	}
	todoDB = append(todoDB, newTodo)

	return newTodo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return todoDB, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
